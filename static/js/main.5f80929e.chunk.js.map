{"version":3,"sources":["graphs/Graph.tsx","graphs/UnlockingGraph.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["style","selector","css","label","height","width","shape","display","Graph","props","cyRef","state","cy","conf","elements","this","container","cytoscape","zoom","center","filter","nodes","addClass","unlockedSelector","removeClass","console","log","on","evt","ele","target","isNode","onNodeClick","isEdge","onEdgeClick","setState","ref","Component","unlockGraph","node","neighborhood","UnlockingGraph","firstUnlocked","group","data","id","source","App","className","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"6QAGMA,EAAgC,CACpC,CACEC,SAAU,OACVC,IAAK,CACHC,MAAO,WACP,cAAe,SACf,cAAe,SACfC,OAAQ,OACRC,MAAO,QACPC,MAAO,WAGX,CACEL,SAAU,cACVC,IAAK,CACHK,QAAS,SAGb,CACEN,SAAU,OACVC,IAAK,CACH,cAAe,SACf,0BAA2B,GAC3B,qBAAsB,cA+DbM,E,kDAjDb,WAAYC,GAAoB,IAAD,8BAC7B,cAAMA,IAFAC,MAA+B,KAGrC,EAAKC,MAAQ,CAACC,GAAI,CAAC,GAFU,CAG9B,C,qDACD,WAAqB,IAAD,OACZC,EAAmC,CACvCC,SAAUC,KAAKN,MAAMK,SACrBd,MAAOA,EACPgB,UAAWD,KAAKL,OAEdE,EAAqBK,IAAUJ,GACnCD,EAAGM,KAAK,GACRN,EAAGO,OAAOP,EAAGQ,OAAO,QACpBR,EAAGS,QAAQC,SAAS,UACpBV,EAAGS,MAAMN,KAAKN,MAAMc,kBAAkBC,YAAY,UAClDC,QAAQC,IAAId,EAAGS,SACfT,EAAGe,GAAG,UAAU,SAACC,GACf,IAAMC,EAAuDD,EAAIE,OAW7DD,EAAIE,UAAY,EAAKtB,MAAMuB,YAC7B,EAAKvB,MAAMuB,YAAYH,GAEhBA,EAAII,UAAY,EAAKxB,MAAMyB,aAClC,EAAKzB,MAAMyB,YAAYL,EAE1B,IACDd,KAAKoB,SAAS,CAACvB,MAChB,G,oBACD,WAAU,IAAD,OAMP,OACI,qBAAKZ,MANK,CACZI,OAAQ,SACRC,MAAO,SACP,aAAc,QAGS+B,IAAK,SAAC1B,GAAwB,OAAVA,IAAgB,EAAKA,MAAQA,EAAM,GAEjF,K,GAhDiB2B,aC7BpB,SAASC,EAAYC,GACnBA,EAAKC,eAAehB,YAAY,SACjC,C,IAEKiB,E,4JACJ,WACE,OACI,cAAC,EAAD,CACE3B,SAAUC,KAAKN,MAAMK,SACrBS,iBAAgB,eAAUR,KAAKN,MAAMiC,eACrCV,YAAaM,GAGpB,K,GAT0BD,aAYdI,ICpBT3B,EAA0C,CAC9C,CAAE6B,MAAO,QAASC,KAAM,CAAEC,GAAI,OAC9B,CAAEF,MAAO,QAASC,KAAM,CAAEC,GAAI,OAC9B,CAAEF,MAAO,QAASC,KAAM,CAAEC,GAAI,OAC9B,CAAEF,MAAO,QAASC,KAAM,CAAEC,GAAI,OAC9B,CAAEF,MAAO,QAASC,KAAM,CAAEC,GAAI,KAAMC,OAAQ,KAAMhB,OAAQ,OAC1D,CAAEa,MAAO,QAASC,KAAM,CAAEC,GAAI,KAAMC,OAAQ,KAAMhB,OAAQ,OAC1D,CAAEa,MAAO,QAASC,KAAM,CAAEC,GAAI,KAAMC,OAAQ,KAAMhB,OAAQ,QAGtDiB,E,4JACJ,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sCACO,8CADP,iCAGA,cAAC,EAAD,CAAgBlC,SAAUA,EAAU4B,cAAe,OACnD,mBACEM,UAAU,WACVC,KAAK,sBACLnB,OAAO,SACPoB,IAAI,sBAJN,6BAWP,K,GApBeb,aAuBHU,IC1BAI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECJYQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJd,G","file":"static/js/main.5f80929e.chunk.js","sourcesContent":["import cytoscape from 'cytoscape';\nimport React, { Component } from 'react';\n\nconst style: cytoscape.Stylesheet[] = [\n  {\n    selector: \"node\",\n    css: {\n      label: \"data(id)\",\n      \"text-valign\": \"center\",\n      \"text-halign\": \"center\",\n      height: \"60px\",\n      width: \"100px\",\n      shape: \"barrel\",\n    },\n  },\n  {\n    selector: \"node.hidden\",\n    css: {\n      display: \"none\",\n    }\n  },\n  {\n    selector: \"edge\",\n    css: {\n      \"curve-style\": \"bezier\",\n      \"control-point-step-size\": 40,\n      \"target-arrow-shape\": \"triangle\",\n    },\n  },\n];\n\ntype GraphProps = {\n    elements: cytoscape.ElementDefinition[],\n    onNodeClick?: (node: cytoscape.NodeSingular) => void,\n    onEdgeClick?: (edge: cytoscape.EdgeSingular) => void,\n    unlockedSelector: string,\n};\n\nclass Graph extends Component<GraphProps> {\n  private cyRef: HTMLDivElement | null = null;\n  constructor(props: GraphProps) {\n    super(props);\n    this.state = {cy: {}};\n  }\n  componentDidMount() {\n    const conf: cytoscape.CytoscapeOptions = {\n      elements: this.props.elements,\n      style: style,\n      container: this.cyRef,\n    };\n    var cy: cytoscape.Core = cytoscape(conf);\n    cy.zoom(1);\n    cy.center(cy.filter('#n0'));\n    cy.nodes().addClass(\"hidden\")\n    cy.nodes(this.props.unlockedSelector).removeClass(\"hidden\");\n    console.log(cy.nodes());\n    cy.on(\"select\", (evt) => {\n      const ele: cytoscape.NodeSingular | cytoscape.EdgeSingular = evt.target;\n      /*\n      cy.animate({\n        zoom: 1,\n        center: {\n          eles: ele\n        }\n      }, {\n        duration: 300\n      })\n      */\n      if (ele.isNode() && this.props.onNodeClick) {\n        this.props.onNodeClick(ele);\n      }\n      else if (ele.isEdge() && this.props.onEdgeClick) {\n        this.props.onEdgeClick(ele);\n      }\n    });\n    this.setState({cy});\n  }\n  render() {\n    let cyStyle = {\n      height: '1000px',\n      width: '1000px',\n      \"text-align\": 'left',\n    };\n    return (\n        <div style={cyStyle} ref={(cyRef) => {if(cyRef !== null) this.cyRef = cyRef}}/>\n    );\n  }\n}\n\nexport default Graph;\n","import { NodeSingular } from 'cytoscape';\nimport { Component } from 'react';\nimport Graph from './Graph';\n\ntype UnlockingGraphProps = {\n    elements: cytoscape.ElementDefinition[],\n    firstUnlocked: string,\n};\n\nfunction unlockGraph(node: NodeSingular) {\n  node.neighborhood().removeClass(\"hidden\");\n}\n\nclass UnlockingGraph extends Component<UnlockingGraphProps> {\n  render() {\n    return (\n        <Graph\n          elements={this.props.elements}\n          unlockedSelector={`node#${this.props.firstUnlocked}`}\n          onNodeClick={unlockGraph}\n        ></Graph>\n    );\n  }\n}\n\nexport default UnlockingGraph;","import './App.css';\nimport * as cytoscape from 'cytoscape';\nimport React, {Component} from 'react';\nimport UnlockingGraph from './graphs/UnlockingGraph';\n\nconst elements: cytoscape.ElementDefinition[] = [\n  { group: \"nodes\", data: { id: \"n0\" } },\n  { group: \"nodes\", data: { id: \"n1\" } },\n  { group: \"nodes\", data: { id: \"n2\" } },\n  { group: \"nodes\", data: { id: \"n3\" } },\n  { group: \"edges\", data: { id: \"e0\", source: \"n0\", target: \"n1\" } },\n  { group: \"edges\", data: { id: \"e1\", source: \"n0\", target: \"n2\" } },\n  { group: \"edges\", data: { id: \"e2\", source: \"n2\", target: \"n3\" } },\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Edit <code>src/App.js</code> and save to reload.  1 2 3\n          </p>\n          <UnlockingGraph elements={elements} firstUnlocked={\"n0\"}></UnlockingGraph>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}